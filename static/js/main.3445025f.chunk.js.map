{"version":3,"sources":["components/Comment.tsx","components/CommentsList.tsx","components/Post.tsx","components/PostList.tsx","constants/index.ts","components/PostSearch.tsx","App.tsx","helpers/api.ts","index.tsx"],"names":["Comment","comment","body","name","email","className","CommentsList","comments","map","Post","post","id","title","user","PostList","posts","key","URL_API","PostSearch","postsSearchFilter","useState","searchQuery","setSearchQuery","handleSearchInput","e","inputValue","currentTarget","value","length","type","onChange","onKeyUp","App","setPosts","initPosts","setInitPosts","isLoading","setIsLoading","isLoaded","setIsLoaded","_","debounce","regExp","RegExp","filter","match","onClick","postsPromise","fetch","then","response","json","usersPromise","commentsPromise","Promise","all","postsFromServer","usersFromServer","commentsFromServer","preparedPostsList","find","userId","postId","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3445025f.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FC<Props> = ({ comment }) => {\n  const { body, name, email } = comment;\n\n  return (\n    <li className=\"posts__comments-item\">\n      <p>\n        {body}\n      </p>\n      <span className=\"posts__comments-item-info\">\n        name:\n        {' '}\n        {name}\n      </span>\n      <span className=\"posts__comments-item-info\">\n        email:\n        {' '}\n        {email}\n      </span>\n    </li>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      Comments:\n      <ul className=\"posts__comments-list\">\n        {comments.map(comment => (\n          <Comment comment={comment} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport CommentsList from './CommentsList';\n\ntype Props = {\n  post: Post;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  const {\n    id,\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"posts__item\">\n      <article>\n        <header className=\"posts__item-title\">\n          {title}\n        </header>\n        <span className=\"posts__item-info\">\n          id:\n          {' '}\n          {id}\n        </span>\n        <span className=\"posts__item-info\">\n          author:\n          {' '}\n          {user ? user.name : 'unknown'}\n        </span>\n        <p className=\"posts__item-text\">\n          {body}\n        </p>\n        {comments && (\n          <CommentsList comments={comments} />\n        )}\n      </article>\n    </li>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <ul className=\"posts__list\">\n      {posts.map(post => (\n        <Post\n          key={post.id}\n          post={post}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","export const URL_API = 'https://jsonplaceholder.typicode.com';\n","import React, { useState } from 'react';\n\ntype Props = {\n  postsSearchFilter: (searchQuery: string) => void;\n  posts: Post[];\n};\n\nconst PostSearch: React.FC<Props> = ({ postsSearchFilter, posts }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearchInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n\n    setSearchQuery(inputValue);\n    postsSearchFilter(searchQuery);\n  };\n\n  return (\n    <div className=\"posts__search\">\n      Search (results:\n      {posts.length}\n      )\n      <input\n        className=\"posts__search-input\"\n        type=\"text\"\n        value={searchQuery}\n        onChange={e => handleSearchInput(e)}\n        onKeyUp={e => handleSearchInput(e)}\n      />\n    </div>\n  );\n};\n\nexport default PostSearch;\n","import React, { useState } from 'react';\nimport './App.css';\nimport _ from 'lodash';\nimport PostList from './components/PostList';\nimport { getPosts, getUsers, getComments } from './helpers/api';\nimport PostSearch from './components/PostSearch';\n\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [initPosts, setInitPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const handleLoadPosts = () => {\n    setIsLoading(true);\n    const postsPromise = getPosts();\n    const usersPromise = getUsers();\n    const commentsPromise = getComments();\n\n    Promise.all([postsPromise, usersPromise, commentsPromise])\n      .then(([postsFromServer, usersFromServer, commentsFromServer]) => {\n        const preparedPostsList = postsFromServer.map(post => {\n          return {\n            ...post,\n            user: usersFromServer\n              .find(user => user.id === post.userId),\n            comments: commentsFromServer\n              .filter(comment => comment.postId === post.id),\n          };\n        });\n\n        setPosts(preparedPostsList);\n        setInitPosts(preparedPostsList);\n        setIsLoading(false);\n        setIsLoaded(true);\n      });\n  };\n\n  const postsSearchFilter = _.debounce((searchQuery: string) => {\n    if (searchQuery === '') {\n      setPosts(initPosts);\n    } else {\n      const regExp = new RegExp(searchQuery);\n\n      setPosts(initPosts.filter(post => {\n        return post.title.match(regExp) || post.body.match(regExp);\n      }));\n    }\n  }, 300);\n\n  return (\n    <div className=\"posts\">\n      {!isLoaded && (\n        <button\n          className=\"posts__button\"\n          type=\"button\"\n          onClick={handleLoadPosts}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      )}\n      {isLoaded && (\n        <>\n          <PostSearch postsSearchFilter={postsSearchFilter} posts={posts} />\n          <PostList posts={posts} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { URL_API } from '../constants';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${URL_API}/posts`)\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch(`${URL_API}/comments`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${URL_API}/users`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}