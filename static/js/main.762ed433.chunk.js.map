{"version":3,"sources":["components/Comment.tsx","components/CommentsList.tsx","components/Post.tsx","components/PostList.tsx","constants/index.ts","components/PostSearch.tsx","App.tsx","helpers/api.ts","index.tsx"],"names":["Comment","comment","body","name","email","className","CommentsList","comments","map","key","id","Post","post","title","user","PostList","posts","URL_API","PostSearch","searchFilter","useState","searchQuery","setSearchQuery","handleSearchInput","e","inputValue","currentTarget","value","length","type","onChange","onKeyUp","App","setPosts","isLoading","setIsLoading","isLoaded","setIsLoaded","errorMessage","setErrorMessage","func","delay","timeoutId","args","clearTimeout","setTimeout","debounce","query","preparedPostsList","filter","regExp","RegExp","match","onClick","Promise","all","fetch","then","response","json","postsFromServer","usersFromServer","commentsFromServer","find","userId","postId","catch","error","message","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.762ed433.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FC<Props> = ({ comment }) => {\n  const { body, name, email } = comment;\n\n  return (\n    <li className=\"posts__comments-item\">\n      <p>\n        {body}\n      </p>\n      <span className=\"posts__comments-item-info\">\n        name:\n        {' '}\n        {name}\n      </span>\n      <span className=\"posts__comments-item-info\">\n        email:\n        {' '}\n        {email}\n      </span>\n    </li>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      Comments:\n      <ul className=\"posts__comments-list\">\n        {comments.map(comment => (\n          <Comment\n            key={comment.id}\n            comment={comment}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport CommentsList from './CommentsList';\n\ntype Props = {\n  post: Post;\n};\n\nconst Post: React.FC<Props> = ({ post }) => {\n  const {\n    id,\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"posts__item\">\n      <article>\n        <header className=\"posts__item-title\">\n          {title}\n        </header>\n        <span className=\"posts__item-info\">\n          id:\n          {' '}\n          {id}\n        </span>\n        <span className=\"posts__item-info\">\n          author:\n          {' '}\n          {user ? user.name : 'unknown'}\n        </span>\n        <p className=\"posts__item-text\">\n          {body}\n        </p>\n        {comments && (\n          <CommentsList comments={comments} />\n        )}\n      </article>\n    </li>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <ul className=\"posts__list\">\n      {posts.map(post => (\n        <Post\n          key={post.id}\n          post={post}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","export const URL_API = 'https://jsonplaceholder.typicode.com';\n","import React, { useState } from 'react';\n\ntype Props = {\n  searchFilter: (searchQuery: string) => void;\n  posts: Post[];\n};\n\nconst PostSearch: React.FC<Props> = ({ searchFilter, posts }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearchInput = (e: React.FormEvent<HTMLInputElement>) => {\n    const inputValue = e.currentTarget.value;\n\n    setSearchQuery(inputValue);\n    searchFilter(searchQuery);\n  };\n\n  return (\n    <div className=\"posts__search\">\n      Search (results:\n      {posts.length}\n      )\n      <input\n        className=\"posts__search-input\"\n        type=\"text\"\n        value={searchQuery}\n        onChange={e => handleSearchInput(e)}\n        onKeyUp={e => handleSearchInput(e)}\n      />\n    </div>\n  );\n};\n\nexport default PostSearch;\n","import React, { useState } from 'react';\nimport './App.css';\n// import _ from 'lodash';\nimport PostList from './components/PostList';\nimport { getPosts, getUsers, getComments } from './helpers/api';\nimport PostSearch from './components/PostSearch';\n\nfunction debounce(func: (...args: string[]) => void, delay: number) {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return (...args: string[]): void => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleLoadPosts = () => {\n    setIsLoading(true);\n\n    Promise.all([getPosts(), getUsers(), getComments()])\n      .then(([postsFromServer, usersFromServer, commentsFromServer]) => {\n        const preparedPostsList = postsFromServer.map(post => {\n          return {\n            ...post,\n            user: usersFromServer\n              .find(user => user.id === post.userId),\n            comments: commentsFromServer\n              .filter(comment => comment.postId === post.id),\n          };\n        });\n\n        setPosts(preparedPostsList);\n        setIsLoading(false);\n        setIsLoaded(true);\n        setErrorMessage('');\n      })\n      .catch(error => {\n        setErrorMessage(`Error occur: ${error.message}. Please try again later`);\n        setIsLoading(false);\n      });\n  };\n\n  const searchFilter = debounce((query: string) => {\n    setSearchQuery(query);\n  }, 500);\n\n  const preparedPostsList = posts.filter(post => {\n    if (searchQuery) {\n      const regExp = new RegExp(searchQuery);\n\n      return post.title.match(regExp) || post.body.match(regExp);\n    }\n\n    return post;\n  });\n\n  return (\n    <div className=\"posts\">\n      {!isLoaded && (\n        <button\n          className=\"posts__button\"\n          type=\"button\"\n          onClick={handleLoadPosts}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      )}\n      {errorMessage && (\n        <div className=\"posts__error\">\n          {errorMessage}\n        </div>\n      )}\n      {isLoaded && (\n        <>\n          <PostSearch searchFilter={searchFilter} posts={preparedPostsList} />\n          <PostList posts={preparedPostsList} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { URL_API } from '../constants';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${URL_API}/posts`)\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch(`${URL_API}/comments`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${URL_API}/users`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}